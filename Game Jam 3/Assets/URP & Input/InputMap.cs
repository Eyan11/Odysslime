//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/URP & Input/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""King Slime"",
            ""id"": ""9920ffb2-e06f-47c0-9ead-844fea5342fd"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""91e4d199-bcab-41d2-8e30-385e7389c0f0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock Camera"",
                    ""type"": ""Value"",
                    ""id"": ""e7b63314-0913-40b9-bd64-86bc44186d32"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Possess"",
                    ""type"": ""Button"",
                    ""id"": ""45defece-e17d-4b6d-b374-372210330919"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""2bdca78d-78c8-4d33-9a1b-9a2acf4a665d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c1220394-7a5c-4486-b5b5-24e237f4727b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7fddb6a5-be27-4f88-91c1-6259785dae4f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7a56a93e-2514-4b61-9ee0-935f8540e638"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a045ba50-d5da-4c24-9c26-f7d6d2562fb4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2c5dc6ac-f3ee-4512-9216-335e379c9a27"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller Left Stick"",
                    ""id"": ""23f05547-ce6c-48c8-9751-1c0352790042"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c654c75b-4b02-48d8-8dcb-329730da8d2b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ed9a90bf-d233-44bd-868e-40a39c2549a2"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f5cb60f2-aba7-4be3-b31f-442a63e622f9"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""83d7fd6a-15b0-467b-a9be-17007a20c256"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9bf2eab1-9b85-43d6-bf9a-2efacf3f1efa"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f10300c9-5f4e-49d1-87f6-650b0a549bd3"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8cd6a4c-b3a3-4986-8c8e-19cf1abfb420"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Possess"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""247a4d00-e9bb-47c8-b20c-b9ee525f0ef2"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Possess"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55feaa24-e274-42d9-9851-e831b44aba60"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a61d6c6-e73e-41f4-8291-6256618e5e14"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Super Slime"",
            ""id"": ""080d134a-28b4-43ec-b67a-0a0464a0032f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8605b519-7723-4c78-a928-d07faee4fce6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8e052598-e951-42f0-b9a2-de003ab2698c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock Camera"",
                    ""type"": ""Value"",
                    ""id"": ""7a3a0931-37d7-4143-a247-741ef6bcae8e"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Possess"",
                    ""type"": ""Button"",
                    ""id"": ""0f443ebc-965a-434d-9101-f8a6bea96cf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability"",
                    ""type"": ""Button"",
                    ""id"": ""79f5ab36-4459-47b5-a7db-eec3faa64163"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""ef9c7553-a91b-407c-9f3d-7bfe8caa568d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return To King"",
                    ""type"": ""Button"",
                    ""id"": ""a02ec0bf-2577-4f6d-a63b-c72c781e621d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""47118d22-85e1-41a1-beb5-7f066e1f8193"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""34e895fd-156c-4735-84f7-9766958e87b3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9bb8538d-e139-4708-9097-b72aab8a16b4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a485c631-5bc8-40e2-aa57-523fa54b94c6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""01f9f7dc-62e2-4588-a871-b4c281109ef9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller Left Stick"",
                    ""id"": ""94d9b6e5-105e-462e-bbf0-9bc23e6005cc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c4bc40b9-a455-4adf-a489-d3d72f195ebd"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""abc9a3ad-1a98-4d04-8543-45355229424e"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""09ac8cca-2ba6-4961-87ff-194ed7f12e15"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""28ae65dd-5e2f-4d3e-8c73-d42f4287b5ac"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""77102569-8fef-44b1-bd32-5661b3fb0464"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""775cc06f-e4d5-4b57-aaab-5d35a90b5461"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22056735-13e2-470e-ab87-47a7fa4641e2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Possess"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb7ea7f0-102f-4048-af80-74477ce13a98"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Possess"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c1d5a98-7b50-4bbb-9a7d-34210e3ba9e7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dc38c86-6932-4283-b6b0-7e13bc3738c5"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c82ae871-3347-4c04-8f15-63edeed12147"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""473bf4f6-04a5-4827-a394-c440d1bbc077"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2325c47b-52f6-4ff8-9c55-a16c727f2472"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""168c3756-71e6-4f5b-a15f-0c372e70a699"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba1ab790-126c-41af-9752-b012ddb01b09"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return To King"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""288fa4de-2566-46ff-9eb7-fdff040157c4"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return To King"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Magic Slime"",
            ""id"": ""c19edff2-7c83-4c3e-a675-2c39f2eba1a6"",
            ""actions"": [
                {
                    ""name"": ""Move Block Vertically"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0e732359-2163-4494-a905-251bf6e3c426"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""fad51547-7e46-4a5d-9cf5-c2bb89fe40f6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Block Vertically"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""98ea0895-2f84-4382-8997-ef48bdee39fb"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Block Vertically"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""02dd9de6-b1df-4f5f-80ee-60cfeb613c01"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Block Vertically"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""2c597b9e-0251-4c00-a7c5-bb9b7e14a947"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Block Vertically"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""76cd01fa-2276-4f44-ac5e-f1b6e61f705e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Block Vertically"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8387aca0-ff3d-4941-82cc-45fd5735fb9c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Block Vertically"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // King Slime
        m_KingSlime = asset.FindActionMap("King Slime", throwIfNotFound: true);
        m_KingSlime_Move = m_KingSlime.FindAction("Move", throwIfNotFound: true);
        m_KingSlime_LockCamera = m_KingSlime.FindAction("Lock Camera", throwIfNotFound: true);
        m_KingSlime_Possess = m_KingSlime.FindAction("Possess", throwIfNotFound: true);
        m_KingSlime_Pause = m_KingSlime.FindAction("Pause", throwIfNotFound: true);
        // Super Slime
        m_SuperSlime = asset.FindActionMap("Super Slime", throwIfNotFound: true);
        m_SuperSlime_Move = m_SuperSlime.FindAction("Move", throwIfNotFound: true);
        m_SuperSlime_Jump = m_SuperSlime.FindAction("Jump", throwIfNotFound: true);
        m_SuperSlime_LockCamera = m_SuperSlime.FindAction("Lock Camera", throwIfNotFound: true);
        m_SuperSlime_Possess = m_SuperSlime.FindAction("Possess", throwIfNotFound: true);
        m_SuperSlime_Ability = m_SuperSlime.FindAction("Ability", throwIfNotFound: true);
        m_SuperSlime_Pause = m_SuperSlime.FindAction("Pause", throwIfNotFound: true);
        m_SuperSlime_ReturnToKing = m_SuperSlime.FindAction("Return To King", throwIfNotFound: true);
        // Magic Slime
        m_MagicSlime = asset.FindActionMap("Magic Slime", throwIfNotFound: true);
        m_MagicSlime_MoveBlockVertically = m_MagicSlime.FindAction("Move Block Vertically", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // King Slime
    private readonly InputActionMap m_KingSlime;
    private List<IKingSlimeActions> m_KingSlimeActionsCallbackInterfaces = new List<IKingSlimeActions>();
    private readonly InputAction m_KingSlime_Move;
    private readonly InputAction m_KingSlime_LockCamera;
    private readonly InputAction m_KingSlime_Possess;
    private readonly InputAction m_KingSlime_Pause;
    public struct KingSlimeActions
    {
        private @InputMap m_Wrapper;
        public KingSlimeActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_KingSlime_Move;
        public InputAction @LockCamera => m_Wrapper.m_KingSlime_LockCamera;
        public InputAction @Possess => m_Wrapper.m_KingSlime_Possess;
        public InputAction @Pause => m_Wrapper.m_KingSlime_Pause;
        public InputActionMap Get() { return m_Wrapper.m_KingSlime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KingSlimeActions set) { return set.Get(); }
        public void AddCallbacks(IKingSlimeActions instance)
        {
            if (instance == null || m_Wrapper.m_KingSlimeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KingSlimeActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @LockCamera.started += instance.OnLockCamera;
            @LockCamera.performed += instance.OnLockCamera;
            @LockCamera.canceled += instance.OnLockCamera;
            @Possess.started += instance.OnPossess;
            @Possess.performed += instance.OnPossess;
            @Possess.canceled += instance.OnPossess;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IKingSlimeActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @LockCamera.started -= instance.OnLockCamera;
            @LockCamera.performed -= instance.OnLockCamera;
            @LockCamera.canceled -= instance.OnLockCamera;
            @Possess.started -= instance.OnPossess;
            @Possess.performed -= instance.OnPossess;
            @Possess.canceled -= instance.OnPossess;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IKingSlimeActions instance)
        {
            if (m_Wrapper.m_KingSlimeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKingSlimeActions instance)
        {
            foreach (var item in m_Wrapper.m_KingSlimeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KingSlimeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KingSlimeActions @KingSlime => new KingSlimeActions(this);

    // Super Slime
    private readonly InputActionMap m_SuperSlime;
    private List<ISuperSlimeActions> m_SuperSlimeActionsCallbackInterfaces = new List<ISuperSlimeActions>();
    private readonly InputAction m_SuperSlime_Move;
    private readonly InputAction m_SuperSlime_Jump;
    private readonly InputAction m_SuperSlime_LockCamera;
    private readonly InputAction m_SuperSlime_Possess;
    private readonly InputAction m_SuperSlime_Ability;
    private readonly InputAction m_SuperSlime_Pause;
    private readonly InputAction m_SuperSlime_ReturnToKing;
    public struct SuperSlimeActions
    {
        private @InputMap m_Wrapper;
        public SuperSlimeActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_SuperSlime_Move;
        public InputAction @Jump => m_Wrapper.m_SuperSlime_Jump;
        public InputAction @LockCamera => m_Wrapper.m_SuperSlime_LockCamera;
        public InputAction @Possess => m_Wrapper.m_SuperSlime_Possess;
        public InputAction @Ability => m_Wrapper.m_SuperSlime_Ability;
        public InputAction @Pause => m_Wrapper.m_SuperSlime_Pause;
        public InputAction @ReturnToKing => m_Wrapper.m_SuperSlime_ReturnToKing;
        public InputActionMap Get() { return m_Wrapper.m_SuperSlime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SuperSlimeActions set) { return set.Get(); }
        public void AddCallbacks(ISuperSlimeActions instance)
        {
            if (instance == null || m_Wrapper.m_SuperSlimeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SuperSlimeActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @LockCamera.started += instance.OnLockCamera;
            @LockCamera.performed += instance.OnLockCamera;
            @LockCamera.canceled += instance.OnLockCamera;
            @Possess.started += instance.OnPossess;
            @Possess.performed += instance.OnPossess;
            @Possess.canceled += instance.OnPossess;
            @Ability.started += instance.OnAbility;
            @Ability.performed += instance.OnAbility;
            @Ability.canceled += instance.OnAbility;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @ReturnToKing.started += instance.OnReturnToKing;
            @ReturnToKing.performed += instance.OnReturnToKing;
            @ReturnToKing.canceled += instance.OnReturnToKing;
        }

        private void UnregisterCallbacks(ISuperSlimeActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @LockCamera.started -= instance.OnLockCamera;
            @LockCamera.performed -= instance.OnLockCamera;
            @LockCamera.canceled -= instance.OnLockCamera;
            @Possess.started -= instance.OnPossess;
            @Possess.performed -= instance.OnPossess;
            @Possess.canceled -= instance.OnPossess;
            @Ability.started -= instance.OnAbility;
            @Ability.performed -= instance.OnAbility;
            @Ability.canceled -= instance.OnAbility;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @ReturnToKing.started -= instance.OnReturnToKing;
            @ReturnToKing.performed -= instance.OnReturnToKing;
            @ReturnToKing.canceled -= instance.OnReturnToKing;
        }

        public void RemoveCallbacks(ISuperSlimeActions instance)
        {
            if (m_Wrapper.m_SuperSlimeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISuperSlimeActions instance)
        {
            foreach (var item in m_Wrapper.m_SuperSlimeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SuperSlimeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SuperSlimeActions @SuperSlime => new SuperSlimeActions(this);

    // Magic Slime
    private readonly InputActionMap m_MagicSlime;
    private List<IMagicSlimeActions> m_MagicSlimeActionsCallbackInterfaces = new List<IMagicSlimeActions>();
    private readonly InputAction m_MagicSlime_MoveBlockVertically;
    public struct MagicSlimeActions
    {
        private @InputMap m_Wrapper;
        public MagicSlimeActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveBlockVertically => m_Wrapper.m_MagicSlime_MoveBlockVertically;
        public InputActionMap Get() { return m_Wrapper.m_MagicSlime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MagicSlimeActions set) { return set.Get(); }
        public void AddCallbacks(IMagicSlimeActions instance)
        {
            if (instance == null || m_Wrapper.m_MagicSlimeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MagicSlimeActionsCallbackInterfaces.Add(instance);
            @MoveBlockVertically.started += instance.OnMoveBlockVertically;
            @MoveBlockVertically.performed += instance.OnMoveBlockVertically;
            @MoveBlockVertically.canceled += instance.OnMoveBlockVertically;
        }

        private void UnregisterCallbacks(IMagicSlimeActions instance)
        {
            @MoveBlockVertically.started -= instance.OnMoveBlockVertically;
            @MoveBlockVertically.performed -= instance.OnMoveBlockVertically;
            @MoveBlockVertically.canceled -= instance.OnMoveBlockVertically;
        }

        public void RemoveCallbacks(IMagicSlimeActions instance)
        {
            if (m_Wrapper.m_MagicSlimeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMagicSlimeActions instance)
        {
            foreach (var item in m_Wrapper.m_MagicSlimeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MagicSlimeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MagicSlimeActions @MagicSlime => new MagicSlimeActions(this);
    public interface IKingSlimeActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLockCamera(InputAction.CallbackContext context);
        void OnPossess(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface ISuperSlimeActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLockCamera(InputAction.CallbackContext context);
        void OnPossess(InputAction.CallbackContext context);
        void OnAbility(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnReturnToKing(InputAction.CallbackContext context);
    }
    public interface IMagicSlimeActions
    {
        void OnMoveBlockVertically(InputAction.CallbackContext context);
    }
}
